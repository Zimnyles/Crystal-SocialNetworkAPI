package views

import "zimniyles/fibergo/internal/models"
import "zimniyles/fibergo/views/components"
import "zimniyles/fibergo/views/widgets"
import "zimniyles/fibergo/views/layout"


templ ProfilePage(userData models.ProfileCredentials, posts []models.FeedPost, pagesCount int, page int, link string) {
    @layout.Layout(layout.LayoutProps{
        Title: "Crystals",
        MetaDescriptiom: "Crystals social network",
    }){
        <main>
            @ProfilePageStyle()
            @ProfilePageScript()
            @layout.HeaderSmall()
            {{ login := ctx.Value("login").(string) }}

            {{
                var role string
                var titleLogin string
                if userData.Role == "0" {
                role = "Пользователь"} else{
                role = "Админ"
                }
                if role == "Админ"{
                    titleLogin = userData.Login + "✨"
                } else {
                    titleLogin = userData.Login
                }
            }}
            <div class="leftmenu-and-content-wrappper">
                <div class="left-menu">
                    @widgets.LeftMenu()
                </div>
                <div class="profile-container">
                    <div class="profile-header--wrapper">
                        <div class="profile-header--left">
                            <form id="avatarForm"
                                action="/api/upload-avatar"
                                method="POST"
                                enctype="multipart/form-data"
                                >
                                <input id="avatarInput" type="file" name="avatar" accept="image/*" style="display: none;">
                            </form>
                            <img id="avatarImage" class="profile-avatar-profile"  crossorigin="anonymous" src={ userData.AvatarPath } alt="Изображение профиля">
                            
                            if login == userData.Login {
                                <p id="avatarPreview">Сменить аватар</p>
                                @AvatarChangeScript()
                            }
                        
                            
                        </div>
                        <div class="profile-header--right-container">
                            <div class="profile-header--right"> 
                                <div class="profile-header--right__title">
                                    <div class="profile-header--right__title-name">{ titleLogin }</div>
                                    <div class="profile-header--right__title-role">
                                        <img class="block-icon" width="25px" height="25px" crossorigin="anonymous" src="/public/icons/block.png"
                                            alt="Блокировать">
                                        <img class="report-icon" width="28px" height="28px" crossorigin="anonymous" src="/public/icons/report3.png"
                                            alt="Пожаловаться">
                                        <img class="fav-icon" width="26px" height="26px" crossorigin="anonymous" src="/public/icons/star.svg"
                                            alt="Добавить в избранное">
                                    </div>
                                </div>
                            </div>
                            <div class="profile-details">
                                <div class="detail-item">
                                    <span class="detail-label">Почта:</span>
                                    <span class="detail-value">{ userData.Email }</span>
                                </div>
                            
                                <div class="detail-item">
                                    <span class="detail-label">Роль:</span>
                                    <span class="detail-value">{ role }</span>
                                </div>
                            
                                <div class="detail-item">
                                    <span class="detail-label">Дата регистрации:</span>
                                    <span class="detail-value join-date">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                        {{ time := userData.Createdat.Format("2006-01-02")}}
                                        <span> { time } </span>
                                    </span>
                                </div>
                            </div>
                        </div>
                        
                    </div>
                    @widgets.ModuleCard(userData.Login, "photo")
                    if userData.Login == login {
                        <div class="newphotoandpost-wrapper">
                        @components.NewPostButton("/createpost"){
                            <img width="24px" height="24px" src="/public/icons/plus.svg" alt="plus ico" class="icon" />
                            <span>Опубликовать запиcь</span>
                        }
                        @components.NewPhotoButton("/addphoto") {
                            <img width="24px" height="24px" src="/public/icons/plus.svg" alt="plus ico" class="icon" />
                            <span>Добавить фотографию</span>
                        }
                        </div>

                    }
                    @widgets.FeedPostsList(posts, pagesCount, page, link, userData.Login)
                    
                </div>
            </div>
            
            
        </main>
    }
}



templ ProfilePageStyle() {
    <style>
        .newphotoandpost-wrapper{
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            gap: 15px;
        }

        .profile-header--right-container {
            display: flex;
            flex-direction: column;
            width: 100%;
        }

        .left-menu{
           min-width: 220px;
           max-width: 220px;
        }

        .leftmenu-and-content-wrappper{
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: row;
            justify-content: center;
            margin-left: 300px;
            margin-right: 300px;
            max-width: 1320px;
        }

        .profile-header--right__title{
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            

        }

        .profile-header--right__title-name{
            font-size: 34px;
            margin-left: 15px;
        }
        .profile-header--right__title-role{
            margin-right: 15px;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            gap: 10px;
        }

        .profile-container {
            color: var(--color-white);
            margin-top: 15px;
            border-radius: 20px;
            width: 100%;
            overflow: hidden;
        }
    
        .profile-header--left {
            display: flex;
            flex-direction: column;
            background: #9a9a9a;
            padding: 30px 20px; 
            text-align: center;
            color: white;
            border-radius: 20px;
            max-width: 195px;
            width: 100%;
            align-items: center;
            justify-content: center;
            min-height: 246px;
        }

        .profile-header--right{
            max-width: 1100px;
            width: 100%;
            margin-bottom: 15px;
        }

        .profile-header--wrapper{
            display: flex;
            flex-direction: row;
            gap: 15px;
            margin-bottom: 15px;
        }
    
        .profile-avatar-profile {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid white;
            margin-bottom: 15px;
        }

        .profile-details{
            background: #222222;
            height: 100%;
        }
    
        .profile-username {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0 5px;
        }
    
        .profile-details {
            background: #222222;
            border-radius: 20px;
            padding: 15px;
        }
    
        .detail-item {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid #eee;
        }
    
        .detail-label {
            font-weight: bold;
            
        }
    
        .detail-value {
            
        }
    
        .join-date {
            display: flex;
            align-items: center;
            gap: 8px;
        }
    
        .join-date svg {
            width: 16px;
            height: 16px;
        }
    </style>
}

templ AvatarChangeScript() {
    <script>
        const preview = document.getElementById("avatarPreview");
        const input = document.getElementById("avatarInput");
        const form = document.getElementById("avatarForm");

        preview.addEventListener("click", function () {
            input.click();
        });


        input.addEventListener("change", function () {
            if (input.files.length > 0) {
                form.submit();
            }
        });
    </script>
}

templ ProfilePageScript() {
    <script>
        window.addEventListener('DOMContentLoaded', function () {
            const img = document.getElementById('avatarImage');
            const defaultColor = [210, 210, 210]; 

            if (!img) {
                applyFallbackColor();
                return;
            }

            function canUseColorThief() {
                return img.complete &&
                    img.naturalWidth !== 0 &&
                    img.src &&
                    !img.src.startsWith('data:');
            }

            function applyFallbackColor() {
                const header = document.querySelector('.profile-header--left');
                if (header) {
                    header.style.background = `rgb(${defaultColor.join(',')})`;
                    console.log('Применен цвет по умолчанию');
                }
            }

            function applyColor() {
                try {
                    const colorThief = new ColorThief();
                    let color;

                    try {
                        color = colorThief.getColor(img);
                        if (!color || color.length !== 3) {
                            throw new Error('Invalid color data');
                        }
                    } catch (e) {
                        console.warn('Не удалось извлечь цвет:', e.message);
                        applyFallbackColor();
                        return;
                    }


                    const minDarkness = 30;
                    const isTooLight = color.every(c => c > (255 - minDarkness));

                    const finalColor = isTooLight
                        ? color.map(c => Math.max(c - minDarkness, 200))
                        : color;

                    const rgbColor = `rgb(${finalColor.join(',')})`;
                    const header = document.querySelector('.profile-header--left');

                    if (header) {
                        header.style.background = rgbColor;
                        console.log('Фон установлен:', rgbColor);
                    }
                } catch (error) {
                    console.error('Критическая ошибка:', error);
                    applyFallbackColor();
                }
            }


            if (canUseColorThief()) {
                applyColor();
            } else {
                img.addEventListener('load', applyColor);
                img.addEventListener('error', applyFallbackColor);

                setTimeout(applyFallbackColor, 1000);
            }
        });
    </script>
}